# Question 1 (5 points)
mydata <- read.csv("~/wine.csv", header=T)
print(summary(mydata))
# Question 2 (10 points)
featuresForCov <- c(1:14)
temp <- cov(mydata[1], mydata[2])
featuresForCov[1] <- max(temp)
for(i in mydata[3:14]) {
temp2 <- cor(i, mydata[2])
print(max(temp2))
featuresForCov[i] <- max(temp2)
}
featuresForCov <- max(featuresForCov)
print(featuresForCov)
###############################################################################
rm(list=ls())
# Question 1 (5 points)
mydata <- read.csv("~/wine.csv", header=T)
print(summary(mydata))
# Question 2 (10 points)
featuresForCov <- c(1:14)
temp <- cov(mydata[1], mydata[2])
featuresForCov[1] <- max(temp)
for(i in mydata[3:14]) {
temp2 <- cor(i, mydata[2])
print(max(temp2))
featuresForCov[i] <- max(temp2)
}
featuresForCov <- max(featuresForCov)
print(featuresForCov)
rm(list=ls())
# Question 1 (5 points)
mydata <- read.csv("~/wine.csv", header=T)
print(summary(mydata))
# Question 2 (10 points)
featuresForCov <- c(1:14)
temp <- cov(mydata[1], mydata[2])
featuresForCov[1] <- max(temp)
for(i in mydata[3:14]) {
temp2 <- cor(i, mydata[2])
print(max(temp2))
featuresForCov[i] <- max(temp2)
}
maxFeaturesForCov <- max(featuresForCov)
print(maxFeaturesForCov)
###############################################################################
# 1 Italian Wines (30 points) #
###############################################################################
rm(list=ls())
# Question 1 (5 points)
mydata <- read.csv("~/wine.csv", header=T)
print(summary(mydata))
# Question 2 (10 points)
featuresForCov <- c(1:14)
temp <- cov(mydata[1], mydata[2])
featuresForCov[1] <- max(temp)
for(i in mydata[3:14]) {
temp2 <- cor(i, mydata[2])
print(max(temp2))
featuresForCov[i] <- max(temp2)
}
maxFeaturesForCov <- max(featuresForCov)
print(max(featuresForCov))
#############################
###############################################################################
# 1 Italian Wines (30 points) #
###############################################################################
rm(list=ls())
# Question 1 (5 points)
mydata <- read.csv("~/wine.csv", header=T)
print(summary(mydata))
# Question 2 (10 points)
featuresForCov <- c(1:14)
temp <- cov(mydata[1], mydata[2])
featuresForCov[1] <- max(temp)
for(i in mydata[3:14]) {
temp2 <- cor(i, mydata[2])
print(max(temp2))
featuresForCov[i] <- max(temp2)
}
rm(list=ls())
# Question 1 (5 points)
mydata <- read.csv("~/wine.csv", header=T)
print(summary(mydata))
# Question 2 (10 points)
featuresForCov <- c(1:14)
temp <- cov(mydata[1], mydata[2])
featuresForCov[1] <- max(temp)
for(i in mydata[3:14]) {
temp2 <- cor(i, mydata[2])
# print(max(temp2))
featuresForCov[i] <- max(temp2)
}
###############################################################################
# 1 Italian Wines (30 points) #
###############################################################################
rm(list=ls())
# Question 1 (5 points)
mydata <- read.csv("~/wine.csv", header=T)
print(summary(mydata))
# Question 2 (10 points)
featuresForCov <- c(1:14)
temp <- cov(mydata[1], mydata[2])
featuresForCov[1] <- max(temp)
for(i in mydata[3:14]) {
temp2 <- cor(i, mydata[2])
# print(max(temp2))
featuresForCov[i] <- max(temp2)
}
maxFeaturesForCov <- max(featuresForCov)
print(featuresForCov)
rm(list=ls())
# Question 1 (5 points)
mydata <- read.csv("~/wine.csv", header=T)
print(summary(mydata))
# Question 2 (10 points)
featuresForCov <- c(1:14)
temp <- cov(mydata[1], mydata[2])
featuresForCov[1] <- max(temp)
for(i in mydata[3:14]) {
temp2 <- cor(i, mydata[2])
featuresForCov[i] <- max(temp2)
}
HighestSoFar <- 0
for(i in seq( from =1 , to = length(featuresForCov))) {
if(max(featuresForCov[i]) >= HighestSoFar){
HighestSoFar <- max(featuresForCov[i])
HighestCov <- max(featuresForCov[i])
HighestFeature <- i
}
}
print(HighestFeature)
rm(list=ls())
# Question 1 (5 points)
mydata <- read.csv("~/wine.csv", header=T)
print(summary(mydata))
# Question 2 (10 points)
featuresForCov <- c(1:14)
temp <- cov(mydata[1], mydata[2])
featuresForCov[1] <- max(temp)
for(i in mydata[3:14]) {
temp2 <- cor(i, mydata[2])
featuresForCov[i] <- max(temp2)
}
HighestSoFar <- 0
for(i in seq( from =1 , to = length(featuresForCov))) {
if(max(featuresForCov[i]) > HighestSoFar){
HighestSoFar <- max(featuresForCov[i])
HighestCov <- max(featuresForCov[i])
HighestFeature <- i
}
}
print(HighestFeature)
rm(list=ls())
# Question 1 (5 points)
mydata <- read.csv("~/wine.csv", header=T)
print(summary(mydata))
# Question 2 (10 points)
featuresForCov <- c(1:14)
temp <- cov(mydata[1], mydata[2])
featuresForCov[1] <- max(temp)
for(i in mydata[3:14]) {
temp2 <- cor(i, mydata[2])
featuresForCov[i] <- max(temp2)
}
HighestSoFar <- 0
for(i in seq( from =1 , to = length(featuresForCov))) {
if(max(featuresForCov[i]) > HighestSoFar){
HighestSoFar <- max(featuresForCov[i])
HighestCov <- max(featuresForCov[i])
HighestFeature <- i
}
}
print(HighestCov)
print(HighestFeature)
regMyData <- lm(mydata[2], mydata[HighestFeature])
plot(regMyData)
View(mydata)
print(mydata[2])
print(mydata[HighestFeature])
regMyData <- lm(mydata[2], mydata[HighestFeature])
print(mydata[HighestFeature])
regMyData <- lm(mydata[2]~mydata[HighestFeature])
help("lm")
plot(mydata[2]~mydata[HighestFeature])
plot(mydata[2]~mydata[HighestFeature])
plot(mydata[2]~mydata[HighestFeature], ,data=mydata)
plot(mydata[2]~mydata[HighestFeature],data=mydata)
plot(linearX~mydata[HighestFeature],data=mydata)
# 1 Italian Wines (30 points) #
###############################################################################
rm(list=ls())
# Question 1 (5 points)
mydata <- read.csv("~/wine.csv", header=T)
print(summary(mydata))
# Question 2 (10 points)
featuresForCov <- c(1:14)
temp <- cov(mydata[1], mydata[2])
featuresForCov[1] <- max(temp)
for(i in mydata[3:14]) {
temp2 <- cor(i, mydata[2])
featuresForCov[i] <- max(temp2)
}
HighestSoFar <- 0
for(i in seq( from =1 , to = length(featuresForCov))) {
if(max(featuresForCov[i]) > HighestSoFar){
HighestSoFar <- max(featuresForCov[i])
HighestCov <- max(featuresForCov[i])
HighestFeature <- i
}
}
print(HighestCov)
print(HighestFeature)
plot(mydata[2], mydata[HighestFeature])
print(mydata[HighestFeature])
print(mydata[HighestFeature][2])
print(mydata[HighestFeature][1])
qplot(mydata[2], mydata[HighestFeature])
install.packages("ggplot2")
#############################
# Data Analysis             #
# Computer Lab Session Exam #
#############################
library(ggplot2)
###############################################################################
# 1 Italian Wines (30 points) #
###############################################################################
rm(list=ls())
# Question 1 (5 points)
mydata <- read.csv("~/wine.csv", header=T)
print(summary(mydata))
# Question 2 (10 points)
featuresForCov <- c(1:14)
temp <- cov(mydata[1], mydata[2])
featuresForCov[1] <- max(temp)
for(i in mydata[3:14]) {
temp2 <- cor(i, mydata[2])
featuresForCov[i] <- max(temp2)
}
HighestSoFar <- 0
for(i in seq( from =1 , to = length(featuresForCov))) {
if(max(featuresForCov[i]) > HighestSoFar){
HighestSoFar <- max(featuresForCov[i])
HighestCov <- max(featuresForCov[i])
HighestFeature <- i
}
}
print(HighestCov)
print(HighestFeature)
print(mydata[HighestFeature])
qplot(mydata[2], mydata[HighestFeature])
regMyData <- lm(mydata[2]~mydata[HighestFeature], data=mydata)
qplot(mydata[2]~mydata[HighestFeature],data=mydata)
regMyData <- lm(mydata[2]~mydata[HighestFeature], data=mydata)
qplot(mydata[2], mydata[HighestFeature],data=mydata)
regMyData <- lm(mydata[2]~mydata[HighestFeature], data=mydata)
qqline(mydata[2], mydata[HighestFeature],data=mydata, col("red"))
regMyData <- lm(mydata[2]~mydata[HighestFeature], data=mydata)
qqline(mydata[2], mydata[HighestFeature],data=mydata, col = "red")
regMyData <- lm(mydata[2]~mydata[HighestFeature], data=mydata)
qqline(mydata[2]~mydata[HighestFeature],data=mydata)
for(i in mydata[2]){
Alcohol <- c(Alcohol, i)
}
print(Alcohol)
Alcohol <- c(1, 178)
for(i in mydata[2]){
Alcohol <- c(Alcohol, i)
}
print(Alcohol)
Alcohol <- c(1, 178)
for(i in mydata[2]){
Alcohol <- c(Alcohol, i)
}
HighestCovFearure <- c(1, 178)
for(i in mydata[HighestFeature]){
HighestCovFearure <- c(HighestCovFearure, i)
}
print(Highest
# Question 3 (15 points)
Alcohol <- c(1, 178)
for(i in mydata[2]){
Alcohol <- c(Alcohol, i)
}
HighestCovFearure <- c(1, 178)
for(i in mydata[HighestFeature]){
HighestCovFearure <- c(HighestCovFearure, i)
}
print(HighestCovFearure)
regMyData <- lm(Alcohol~HighestCovFearure)
View(mydata)
Alcohol <- c(1, 178)
for(i in mydata[2]){
Alcohol <- c(Alcohol, i)
}
HighestCovFearure <- c(1, 178)
for(i in mydata[5]){
HighestCovFearure <- c(HighestCovFearure, i)
}
print(HighestCovFearure)
Alcohol <- c(1, length(mydata[2]))
for(i in seq( from =1 , to = length(mydata[2]))){
Alcohol[i] <- mydata[2][i]
}
HighestCovFearure <- c(1, 178)
for(i in seq( from =1 , to = length(mydata[HighestFeature]))){
Alcohol[i] <- mydata[HighestFeature][i]
}
print(HighestCovFearure)
# Question 3 (15 points)
Alcohol <- c(1, length(mydata[2]))
for(i in seq( from =1 , to = length(mydata[2]))){
Alcohol[i] <- mydata[2][i]
}
HighestCovFearure <- c(1, 178)
for(i in seq( from =1 , to = length(mydata[HighestFeature]))){
HighestCovFearure[i] <- mydata[HighestFeature][i]
}
print(HighestCovFearure)
Alcohol <- c(1, length(mydata[2]))
for(i in seq( from =1 , to = length(mydata[2]))){
Alcohol[i] <- mydata[2][i]
}
HighestCovFearure <- c(1, length(mydata[HighestFeature]))
for(i in seq( from =1 , to = length(mydata[HighestFeature]))){
HighestCovFearure[i] <- mydata[HighestFeature][i]
}
print(HighestCovFearure)
# Question 3 (15 points)
Alcohol <- c(1, length(mydata[2]))
for(i in seq( from =1 , to = length(mydata[2]))){
Alcohol[i] <- mydata[2][i]
}
CovFearure <- c(1, length(mydata[HighestFeature]))
for(i in seq( from =1 , to = length(mydata[HighestFeature]))){
CovFearure[i] <- mydata[HighestFeature][i]
}
print(CovFearure)
Alcohol <- c(1, length(mydata[2]))
for(i in seq( from =1 , to = length(mydata[2]))){
Alcohol[i] <- mydata[2][i]
}
CovFeature <- c(1, length(mydata[HighestFeature]))
for(i in seq( from =1 , to = length(mydata[HighestFeature]))){
CovFeature[i] <- mydata[HighestFeature][i]
}
print(CovFeature[1])
Alcohol <- c(1, length(mydata[2]))
for(i in seq( from =1 , to = length(mydata[2]))){
Alcohol[i] <- mydata[2][i]
}
CovFeature <- c(1, length(mydata[HighestFeature]))
for(i in seq( from =1 , to = length(mydata[HighestFeature]))){
CovFeature[i] <- mydata[HighestFeature][i]
}
print(Alcohol)
regMyData <- lm(Alcohol~CovFeature[1])
View(mydata)
regMyData <- lm(Alcohol~Alcalinity.of.ash, data=mydata)
qqline(Alcohol~Alcalinity.of.ash, data=mydata)
regMyData <- lm(Alcohol~Alcalinity.of.ash, data=mydata)
regMyData <- lm(Alcohol~Alcalinity.of.ash, data=mydata)
plot(Alcohol~Alcalinity.of.ash, data=mydata)
plot(mydata[2], mydata[HighestFeature])
qplot(Alcohol~Alcalinity.of.ash, data=mydata)
regMyData <- lm(Alcohol~Alcalinity.of.ash, data=mydata)
qplot(Alcohol, Alcalinity.of.ash, data=mydata)
qline(Alcohol, Alcalinity.of.ash, data=mydata)
qqline(Alcohol, Alcalinity.of.ash, data=mydata)
plot(Alcohol, Alcalinity.of.ash, data=mydata)
plot(Alcohol~Alcalinity.of.ash, data=mydata)
line(Alcohol~Alcalinity.of.ash, data=mydata)
points(Alcohol~Alcalinity.of.ash, data=mydata)
points(Alcohol~Alcalinity.of.ash, data=mydata, col="red")
precited <- predict(regMyData)
print(predicted)
predicted <- predict(regMyData)
print(predicted)
predicted <- predict(regMyData)
print(predicted)
MSE <- function(x, y) {(x - y)^2}
result <- c(1, 178)
for (i in seq( from =1 , to = length(mydata[2]))) {
result[i] <- MSE(mydata[2][i], predicted[i])
}
print(result)
predicted <- predict(regMyData)
print(predicted)
MSE <- function(x, y) {(x - y)^2}
result <- c(1, 178)
for (i in seq( from =1 , to = length(mydata[2]))) {
result[i] <- MSE(mydata[2][i], predicted[i])
}
print(mean(result))
rm(list=ls())
# Question 1 (5 points)
mydata <- read.csv("~/whales.csv", header=T)
print(summary(mydata))
# Question 2
install.packages("RgoogleMaps")
library(DT)
library(magrittr)
library(leaflet)
library(leaflet.extras)
library(tidyverse)
# Cleaning Workspace
rm(list=ls())
# Setting Workspace (Please change to the directory of the CSV file)
setwd("E:/Workspace/Scratch Folder/R/Project")
# Reading Data
#------------------
MeteoritesLandings = read.csv("meteorite-landings.csv")
MeteoritesLandings = MeteoritesLandings %>%
# filter out weird years
filter(year>=860 & year<=2016) %>%
# filter out weird locations
filter(reclong<=180 & reclong>=-180 & (reclat!=0 | reclong!=0))
# Peek into the Data
datatable(head(MeteoritesLandings), style="bootstrap", class="table-condensed", options = list(dom = 'tp',scrollX = TRUE))
# Class Analysis
#------------------
# Distribution of Meteorite Landings with Meteorite Mass
# ------------------------------------------------------
# The mass of the Meteorites are indicated by the Radius of the Circles.
factpal <- colorFactor(c("red","blue"),
MeteoritesLandings$fall)
leaflet(MeteoritesLandings) %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addCircles(lng = ~reclong, lat = ~reclat,radius = ~(mass/1e3)*10 ,
color = ~factpal(fall))  %>%
# controls
setView(lng=0, lat=0,zoom = 2) %>%
addLegend("bottomright", pal = factpal, values = ~fall,
title = "Meteorites landings and fall",
opacity = 1)
# Distribution of US Meteorite Landings with Meteorite Mass
# ---------------------------------------------------------
# The mass of the Meteorites are indicated by the Radius of the Circles. The mass has been converted to Kgs and then multiplied by 10
factpal <- colorFactor(c("red","blue"),
USMeteoritesLandings$fall)
leaflet(USMeteoritesLandings) %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addCircles(lng = ~reclong, lat = ~reclat,radius = ~(mass/1e3)*10 ,
color = ~factpal(fall))  %>%
# controls
setView(lng=center_reclong, lat=center_reclat,zoom = 4) %>%
addLegend("bottomright", pal = factpal, values = ~fall,
title = "Meteorites landings and fall",
opacity = 1)
# Heatmap of US Meteorite Landings
# --------------------------------
# The intensity of the Heatmap is based on the mass of the meteorites.
USMeteoritesLandings %>% leaflet() %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addHeatmap(lng = ~reclong, lat = ~reclat, intensity = ~mass,
blur = 20, max = 0.05, radius = 15) %>%
# controls
setView(lng=center_reclong, lat=center_reclat,zoom = 4)
# Distribution of Meteorite Landings with Meteorite Mass
# ------------------------------------------------------
# The mass of the Meteorites are indicated by the Radius of the Circles.
factpal <- colorFactor(c("red","blue"),
MeteoritesLandings$fall)
leaflet(MeteoritesLandings) %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addCircles(lng = ~reclong, lat = ~reclat,radius = ~(mass/1e3)*10 ,
color = ~factpal(fall))  %>%
# controls
setView(lng=0, lat=0,zoom = 2) %>%
addLegend("bottomright", pal = factpal, values = ~fall,
title = "Meteorites landings and fall",
opacity = 1)
# Distribution of US Meteorite Landings
# -------------------------------------
#The following plot shows the distribution of the US meteorite landings.Here we have filtered the US meteorite landings by filtering the latitude and longitude.
top = 49.3457868 # north lat
left = -124.7844079 # west long
right = -66.9513812 # east long
bottom =  24.7433195 # south lat
USMeteoritesLandings = MeteoritesLandings %>%
filter(reclat >= bottom) %>%
filter ( reclat <= top) %>%
filter( reclong >= left ) %>%
filter(reclong <= right)
center_reclong = median(USMeteoritesLandings$reclong,na.rm = TRUE)
center_reclat = median(USMeteoritesLandings$reclat,na.rm = TRUE)
leaflet(USMeteoritesLandings) %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addCircles(lng = ~reclong, lat = ~reclat,
color = c("blue"))  %>%
# controls
setView(lng=center_reclong, lat=center_reclat,zoom = 4)
# Peek into the US Met Landings Data
USMeteoritesLandings = USMeteoritesLandings %>% arrange(desc(mass))
# Tabular
datatable(USMeteoritesLandings, style="bootstrap", class="table-condensed", options = list(dom = 'tp',scrollX = TRUE))
# Distribution of US Meteorite Landings with Meteorite Mass
# ---------------------------------------------------------
# The mass of the Meteorites are indicated by the Radius of the Circles. The mass has been converted to Kgs and then multiplied by 10
factpal <- colorFactor(c("red","blue"),
USMeteoritesLandings$fall)
leaflet(USMeteoritesLandings) %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addCircles(lng = ~reclong, lat = ~reclat,radius = ~(mass/1e3)*10 ,
color = ~factpal(fall))  %>%
# controls
setView(lng=center_reclong, lat=center_reclat,zoom = 4) %>%
addLegend("bottomright", pal = factpal, values = ~fall,
title = "Meteorites landings and fall",
opacity = 1)
# Heatmap of US Meteorite Landings
# --------------------------------
# The intensity of the Heatmap is based on the mass of the meteorites.
USMeteoritesLandings %>% leaflet() %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addHeatmap(lng = ~reclong, lat = ~reclat, intensity = ~mass,
blur = 20, max = 0.05, radius = 15) %>%
# controls
setView(lng=center_reclong, lat=center_reclat,zoom = 4)
